------------------------------- Model Structure ----------------------------------
\ Model MIP-moo-LAMOSCAD
\ LP format - for model browsing. Use MPS format to capture full model detail.
Minimize multi-objectives
  objective_re_1: Priority=2 Weight=-1 AbsTol=1e-06 RelTol=0
   16.2412350189133 cover[o53,s9] + 7.199078903271356 cover[o178,s200]
   + 9.971354141128359 cover[o203,s300] + 2.775111469957623 cover[o7,s300]
   + 21.12913372092815 cover[o221,s200] + 21.34807114873513 cover[o64,s9]
   + 21.16976505337119 cover[o25,s200] + 2.448630903919309 cover[o94,s300]
   + 0.1279089544197715 cover[o208,s6] + 9.958789298304282 cover[o86,s300]
   + 2.445906289819938 cover[o93,s300] + 9.861531054073982 cover[o6,s300]
   + 4.03837244288361 cover[o10,s300] + 7.245804087701871 cover[o169,s200]
   + 21.02013376268472 cover[o185,s200] + 0.666428024658225 cover[o87,s300]
   + 5.925102322095621 cover[o24,s200] + 6.263122907209596 cover[o190,s9]
   + 5.105056894438927 cover[o162,s6] + 12.81452451426667 cover[o157,s6]
   + 7.233755374890133 cover[o175,s200] + 21.42961498466672 cover[o3,s9]
   + 20.93533090779846 cover[o28,s200] + 21.34971731111064 cover[o45,s9]
   + 21.1743411393731 cover[o27,s200] + 20.98810076711833 cover[o219,s200]
   + 0.1143406334373491 cover[o212,s6] + 0.0180199471236781 cover[o214,s6]
   + 5.030757961178072 cover[o160,s6] + 6.280985862817034 cover[o191,s9]
   + 20.97093809263087 cover[o184,s200] + 5.929884557948656 cover[o37,s200]
   + 13.33658940308498 cover[o83,s300] + 12.74282356673769 cover[o155,s6]
   + 2.460580880265808 cover[o91,s300] + 21.04798359882053 cover[o183,s200]
   + 21.09235459476615 cover[o181,s200] + 5.088207627036022 cover[o159,s6]
   + 5.203484395913643 cover[o158,s6] + 0.1260197802609803 cover[o153,s6]
   + 22.0192938901975 cover[o44,s300] + 21.33326753899654 cover[o59,s9]
   + 0.6355528827160275 cover[o90,s300] + 20.79790081370765 cover[o79,s300]
   + 5.275507583025148 cover[o161,s6] + 5.047507425812057 cover[o163,s6]
   + 0.8015652045786243 cover[o22,s200]
   + 21.10201711931112 cover[o187,s200] + 20.80529269800943 cover[o84,s300]
   + 20.96859132179152 cover[o198,s200] + 20.80907636926289 cover[o82,s300]
   + 20.94724569559364 cover[o220,s200] + 0.1604897231880482 cover[o207,s6]
   + 0.9167970446636156 cover[o192,s200]
  objective_cost_2: Priority=1 Weight=1 AbsTol=1e-06 RelTol=0
   0.5 select[s300] + 0.25 select[s6] + 0.25 select[s9] + 0.25 select[s200]
   + 0.0605 deploy[o53,s9,m] - 2.22775 deploy[o53,s9,c]
   - 0.9201785714285716 deploy[o53,s9,i] + 0.0605 deploy[o178,s200,m]
   - 2.22775 deploy[o178,s200,c] - 1.247071428571429 deploy[o178,s200,i]
   - 0.9201785714285716 deploy[o203,s300,m] - 2.22775 deploy[o203,s300,c]
   - 1.900857142857143 deploy[o203,s300,i]
   - 0.9201785714285716 deploy[o7,s300,m] - 2.22775 deploy[o7,s300,c]
   - 1.900857142857143 deploy[o7,s300,i] + 0.0605 deploy[o221,s200,m]
   - 2.22775 deploy[o221,s200,c] - 1.247071428571429 deploy[o221,s200,i]
   + 0.0605 deploy[o64,s9,m] - 2.22775 deploy[o64,s9,c]
   - 0.9201785714285716 deploy[o64,s9,i] + 0.0605 deploy[o25,s200,m]
   - 2.22775 deploy[o25,s200,c] - 1.247071428571429 deploy[o25,s200,i]
   - 0.9201785714285716 deploy[o94,s300,m] - 2.22775 deploy[o94,s300,c]
   - 1.900857142857143 deploy[o94,s300,i]
   - 0.5932857142857144 deploy[o208,s6,m] - 2.22775 deploy[o208,s6,c]
   - 1.573964285714286 deploy[o208,s6,i]
   - 0.9201785714285716 deploy[o86,s300,m] - 2.22775 deploy[o86,s300,c]
   - 1.900857142857143 deploy[o86,s300,i]
   - 0.9201785714285716 deploy[o93,s300,m] - 2.22775 deploy[o93,s300,c]
   - 1.900857142857143 deploy[o93,s300,i]
   - 0.9201785714285716 deploy[o6,s300,m] - 2.22775 deploy[o6,s300,c]
   - 1.900857142857143 deploy[o6,s300,i]
   - 0.9201785714285716 deploy[o10,s300,m] - 2.22775 deploy[o10,s300,c]
   - 1.900857142857143 deploy[o10,s300,i] + 0.0605 deploy[o169,s200,m]
   - 2.22775 deploy[o169,s200,c] - 1.247071428571429 deploy[o169,s200,i]
   + 0.0605 deploy[o185,s200,m] - 2.22775 deploy[o185,s200,c]
   - 1.247071428571429 deploy[o185,s200,i]
   - 0.9201785714285716 deploy[o87,s300,m] - 2.22775 deploy[o87,s300,c]
   - 1.900857142857143 deploy[o87,s300,i] + 0.0605 deploy[o24,s200,m]
   - 2.22775 deploy[o24,s200,c] - 1.247071428571429 deploy[o24,s200,i]
   + 0.0605 deploy[o190,s9,m] - 2.22775 deploy[o190,s9,c]
   - 0.9201785714285716 deploy[o190,s9,i]
   - 0.5932857142857144 deploy[o162,s6,m] - 2.22775 deploy[o162,s6,c]
   - 1.573964285714286 deploy[o162,s6,i]
   - 0.5932857142857144 deploy[o157,s6,m] - 2.22775 deploy[o157,s6,c]
   - 1.573964285714286 deploy[o157,s6,i] + 0.0605 deploy[o175,s200,m]
   - 2.22775 deploy[o175,s200,c] - 1.247071428571429 deploy[o175,s200,i]
   + 0.0605 deploy[o3,s9,m] - 2.22775 deploy[o3,s9,c]
   - 0.9201785714285716 deploy[o3,s9,i] + 0.0605 deploy[o28,s200,m]
   - 2.22775 deploy[o28,s200,c] - 1.247071428571429 deploy[o28,s200,i]
   + 0.0605 deploy[o45,s9,m] - 2.22775 deploy[o45,s9,c]
   - 0.9201785714285716 deploy[o45,s9,i] + 0.0605 deploy[o27,s200,m]
   - 2.22775 deploy[o27,s200,c] - 1.247071428571429 deploy[o27,s200,i]
   + 0.0605 deploy[o219,s200,m] - 2.22775 deploy[o219,s200,c]
   - 1.247071428571429 deploy[o219,s200,i]
   - 0.5932857142857144 deploy[o212,s6,m] - 2.22775 deploy[o212,s6,c]
   - 1.573964285714286 deploy[o212,s6,i]
   - 0.5932857142857144 deploy[o214,s6,m] - 2.22775 deploy[o214,s6,c]
   - 1.573964285714286 deploy[o214,s6,i]
   - 0.5932857142857144 deploy[o160,s6,m] - 2.22775 deploy[o160,s6,c]
   - 1.573964285714286 deploy[o160,s6,i] + 0.0605 deploy[o191,s9,m]
   - 2.22775 deploy[o191,s9,c] - 0.9201785714285716 deploy[o191,s9,i]
   + 0.0605 deploy[o184,s200,m] - 2.22775 deploy[o184,s200,c]
   - 1.247071428571429 deploy[o184,s200,i] + 0.0605 deploy[o37,s200,m]
   - 2.22775 deploy[o37,s200,c] - 1.247071428571429 deploy[o37,s200,i]
   - 0.9201785714285716 deploy[o83,s300,m] - 2.22775 deploy[o83,s300,c]
   - 1.900857142857143 deploy[o83,s300,i]
   - 0.5932857142857144 deploy[o155,s6,m] - 2.22775 deploy[o155,s6,c]
   - 1.573964285714286 deploy[o155,s6,i]
   - 0.9201785714285716 deploy[o91,s300,m] - 2.22775 deploy[o91,s300,c]
   - 1.900857142857143 deploy[o91,s300,i] + 0.0605 deploy[o183,s200,m]
   - 2.22775 deploy[o183,s200,c] - 1.247071428571429 deploy[o183,s200,i]
   + 0.0605 deploy[o181,s200,m] - 2.22775 deploy[o181,s200,c]
   - 1.247071428571429 deploy[o181,s200,i]
   - 0.5932857142857144 deploy[o159,s6,m] - 2.22775 deploy[o159,s6,c]
   - 1.573964285714286 deploy[o159,s6,i]
   - 0.5932857142857144 deploy[o158,s6,m] - 2.22775 deploy[o158,s6,c]
   - 1.573964285714286 deploy[o158,s6,i]
   - 0.5932857142857144 deploy[o153,s6,m] - 2.22775 deploy[o153,s6,c]
   - 1.573964285714286 deploy[o153,s6,i]
   - 0.9201785714285716 deploy[o44,s300,m] - 2.22775 deploy[o44,s300,c]
   - 1.900857142857143 deploy[o44,s300,i] + 0.0605 deploy[o59,s9,m]
   - 2.22775 deploy[o59,s9,c] - 0.9201785714285716 deploy[o59,s9,i]
   - 0.9201785714285716 deploy[o90,s300,m] - 2.22775 deploy[o90,s300,c]
   - 1.900857142857143 deploy[o90,s300,i]
   - 0.9201785714285716 deploy[o79,s300,m] - 2.22775 deploy[o79,s300,c]
   - 1.900857142857143 deploy[o79,s300,i]
   - 0.5932857142857144 deploy[o161,s6,m] - 2.22775 deploy[o161,s6,c]
   - 1.573964285714286 deploy[o161,s6,i]
   - 0.5932857142857144 deploy[o163,s6,m] - 2.22775 deploy[o163,s6,c]
   - 1.573964285714286 deploy[o163,s6,i] + 0.0605 deploy[o22,s200,m]
   - 2.22775 deploy[o22,s200,c] - 1.247071428571429 deploy[o22,s200,i]
   + 0.0605 deploy[o187,s200,m] - 2.22775 deploy[o187,s200,c]
   - 1.247071428571429 deploy[o187,s200,i]
   - 0.9201785714285716 deploy[o84,s300,m] - 2.22775 deploy[o84,s300,c]
   - 1.900857142857143 deploy[o84,s300,i] + 0.0605 deploy[o198,s200,m]
   - 2.22775 deploy[o198,s200,c] - 1.247071428571429 deploy[o198,s200,i]
   - 0.9201785714285716 deploy[o82,s300,m] - 2.22775 deploy[o82,s300,c]
   - 1.900857142857143 deploy[o82,s300,i] + 0.0605 deploy[o220,s200,m]
   - 2.22775 deploy[o220,s200,c] - 1.247071428571429 deploy[o220,s200,i]
   - 0.5932857142857144 deploy[o207,s6,m] - 2.22775 deploy[o207,s6,c]
   - 1.573964285714286 deploy[o207,s6,i] + 0.0605 deploy[o192,s200,m]
   - 2.22775 deploy[o192,s200,c] - 1.247071428571429 deploy[o192,s200,i]
Subject To
 C_open_facility_to_cover[o53,s9]: cover[o53,s9] - select[s9] <= 0
 C_open_facility_to_cover[o178,s200]: cover[o178,s200] - select[s200] <= 0
 C_open_facility_to_cover[o203,s300]: cover[o203,s300] - select[s300] <= 0
 C_open_facility_to_cover[o7,s300]: cover[o7,s300] - select[s300] <= 0
 C_open_facility_to_cover[o221,s200]: cover[o221,s200] - select[s200] <= 0
 C_open_facility_to_cover[o64,s9]: cover[o64,s9] - select[s9] <= 0
 C_open_facility_to_cover[o25,s200]: cover[o25,s200] - select[s200] <= 0
 C_open_facility_to_cover[o94,s300]: cover[o94,s300] - select[s300] <= 0
 C_open_facility_to_cover[o208,s6]: cover[o208,s6] - select[s6] <= 0
 C_open_facility_to_cover[o86,s300]: cover[o86,s300] - select[s300] <= 0
 C_open_facility_to_cover[o93,s300]: cover[o93,s300] - select[s300] <= 0
 C_open_facility_to_cover[o6,s300]: cover[o6,s300] - select[s300] <= 0
 C_open_facility_to_cover[o10,s300]: cover[o10,s300] - select[s300] <= 0
 C_open_facility_to_cover[o169,s200]: cover[o169,s200] - select[s200] <= 0
 C_open_facility_to_cover[o185,s200]: cover[o185,s200] - select[s200] <= 0
 C_open_facility_to_cover[o87,s300]: cover[o87,s300] - select[s300] <= 0
 C_open_facility_to_cover[o24,s200]: cover[o24,s200] - select[s200] <= 0
 C_open_facility_to_cover[o190,s9]: cover[o190,s9] - select[s9] <= 0
 C_open_facility_to_cover[o162,s6]: cover[o162,s6] - select[s6] <= 0
 C_open_facility_to_cover[o157,s6]: cover[o157,s6] - select[s6] <= 0
 C_open_facility_to_cover[o175,s200]: cover[o175,s200] - select[s200] <= 0
 C_open_facility_to_cover[o3,s9]: cover[o3,s9] - select[s9] <= 0
 C_open_facility_to_cover[o28,s200]: cover[o28,s200] - select[s200] <= 0
 C_open_facility_to_cover[o45,s9]: cover[o45,s9] - select[s9] <= 0
 C_open_facility_to_cover[o27,s200]: cover[o27,s200] - select[s200] <= 0
 C_open_facility_to_cover[o219,s200]: cover[o219,s200] - select[s200] <= 0
 C_open_facility_to_cover[o212,s6]: cover[o212,s6] - select[s6] <= 0
 C_open_facility_to_cover[o214,s6]: cover[o214,s6] - select[s6] <= 0
 C_open_facility_to_cover[o160,s6]: cover[o160,s6] - select[s6] <= 0
 C_open_facility_to_cover[o191,s9]: cover[o191,s9] - select[s9] <= 0
 C_open_facility_to_cover[o184,s200]: cover[o184,s200] - select[s200] <= 0
 C_open_facility_to_cover[o37,s200]: cover[o37,s200] - select[s200] <= 0
 C_open_facility_to_cover[o83,s300]: cover[o83,s300] - select[s300] <= 0
 C_open_facility_to_cover[o155,s6]: cover[o155,s6] - select[s6] <= 0
 C_open_facility_to_cover[o91,s300]: cover[o91,s300] - select[s300] <= 0
 C_open_facility_to_cover[o183,s200]: cover[o183,s200] - select[s200] <= 0
 C_open_facility_to_cover[o181,s200]: cover[o181,s200] - select[s200] <= 0
 C_open_facility_to_cover[o159,s6]: cover[o159,s6] - select[s6] <= 0
 C_open_facility_to_cover[o158,s6]: cover[o158,s6] - select[s6] <= 0
 C_open_facility_to_cover[o153,s6]: cover[o153,s6] - select[s6] <= 0
 C_open_facility_to_cover[o44,s300]: cover[o44,s300] - select[s300] <= 0
 C_open_facility_to_cover[o59,s9]: cover[o59,s9] - select[s9] <= 0
 C_open_facility_to_cover[o90,s300]: cover[o90,s300] - select[s300] <= 0
 C_open_facility_to_cover[o79,s300]: cover[o79,s300] - select[s300] <= 0
 C_open_facility_to_cover[o161,s6]: cover[o161,s6] - select[s6] <= 0
 C_open_facility_to_cover[o163,s6]: cover[o163,s6] - select[s6] <= 0
 C_open_facility_to_cover[o22,s200]: cover[o22,s200] - select[s200] <= 0
 C_open_facility_to_cover[o187,s200]: cover[o187,s200] - select[s200] <= 0
 C_open_facility_to_cover[o84,s300]: cover[o84,s300] - select[s300] <= 0
 C_open_facility_to_cover[o198,s200]: cover[o198,s200] - select[s200] <= 0
 C_open_facility_to_cover[o82,s300]: cover[o82,s300] - select[s300] <= 0
 C_open_facility_to_cover[o220,s200]: cover[o220,s200] - select[s200] <= 0
 C_open_facility_to_cover[o207,s6]: cover[o207,s6] - select[s6] <= 0
 C_open_facility_to_cover[o192,s200]: cover[o192,s200] - select[s200] <= 0
 C_few_facility_per_spill[o53,s9]: cover[o53,s9] <= 1
 C_few_facility_per_spill[o178,s200]: cover[o178,s200] <= 1
 C_few_facility_per_spill[o203,s300]: cover[o203,s300] <= 1
 C_few_facility_per_spill[o7,s300]: cover[o7,s300] <= 1
 C_few_facility_per_spill[o221,s200]: cover[o221,s200] <= 1
 C_few_facility_per_spill[o64,s9]: cover[o64,s9] <= 1
 C_few_facility_per_spill[o25,s200]: cover[o25,s200] <= 1
 C_few_facility_per_spill[o94,s300]: cover[o94,s300] <= 1
 C_few_facility_per_spill[o208,s6]: cover[o208,s6] <= 1
 C_few_facility_per_spill[o86,s300]: cover[o86,s300] <= 1
 C_few_facility_per_spill[o93,s300]: cover[o93,s300] <= 1
 C_few_facility_per_spill[o6,s300]: cover[o6,s300] <= 1
 C_few_facility_per_spill[o10,s300]: cover[o10,s300] <= 1
 C_few_facility_per_spill[o169,s200]: cover[o169,s200] <= 1
 C_few_facility_per_spill[o185,s200]: cover[o185,s200] <= 1
 C_few_facility_per_spill[o87,s300]: cover[o87,s300] <= 1
 C_few_facility_per_spill[o24,s200]: cover[o24,s200] <= 1
 C_few_facility_per_spill[o190,s9]: cover[o190,s9] <= 1
 C_few_facility_per_spill[o162,s6]: cover[o162,s6] <= 1
 C_few_facility_per_spill[o157,s6]: cover[o157,s6] <= 1
 C_few_facility_per_spill[o175,s200]: cover[o175,s200] <= 1
 C_few_facility_per_spill[o3,s9]: cover[o3,s9] <= 1
 C_few_facility_per_spill[o28,s200]: cover[o28,s200] <= 1
 C_few_facility_per_spill[o45,s9]: cover[o45,s9] <= 1
 C_few_facility_per_spill[o27,s200]: cover[o27,s200] <= 1
 C_few_facility_per_spill[o219,s200]: cover[o219,s200] <= 1
 C_few_facility_per_spill[o212,s6]: cover[o212,s6] <= 1
 C_few_facility_per_spill[o214,s6]: cover[o214,s6] <= 1
 C_few_facility_per_spill[o160,s6]: cover[o160,s6] <= 1
 C_few_facility_per_spill[o191,s9]: cover[o191,s9] <= 1
 C_few_facility_per_spill[o184,s200]: cover[o184,s200] <= 1
 C_few_facility_per_spill[o37,s200]: cover[o37,s200] <= 1
 C_few_facility_per_spill[o83,s300]: cover[o83,s300] <= 1
 C_few_facility_per_spill[o155,s6]: cover[o155,s6] <= 1
 C_few_facility_per_spill[o91,s300]: cover[o91,s300] <= 1
 C_few_facility_per_spill[o183,s200]: cover[o183,s200] <= 1
 C_few_facility_per_spill[o181,s200]: cover[o181,s200] <= 1
 C_few_facility_per_spill[o159,s6]: cover[o159,s6] <= 1
 C_few_facility_per_spill[o158,s6]: cover[o158,s6] <= 1
 C_few_facility_per_spill[o153,s6]: cover[o153,s6] <= 1
 C_few_facility_per_spill[o44,s300]: cover[o44,s300] <= 1
 C_few_facility_per_spill[o59,s9]: cover[o59,s9] <= 1
 C_few_facility_per_spill[o90,s300]: cover[o90,s300] <= 1
 C_few_facility_per_spill[o79,s300]: cover[o79,s300] <= 1
 C_few_facility_per_spill[o161,s6]: cover[o161,s6] <= 1
 C_few_facility_per_spill[o163,s6]: cover[o163,s6] <= 1
 C_few_facility_per_spill[o22,s200]: cover[o22,s200] <= 1
 C_few_facility_per_spill[o187,s200]: cover[o187,s200] <= 1
 C_few_facility_per_spill[o84,s300]: cover[o84,s300] <= 1
 C_few_facility_per_spill[o198,s200]: cover[o198,s200] <= 1
 C_few_facility_per_spill[o82,s300]: cover[o82,s300] <= 1
 C_few_facility_per_spill[o220,s200]: cover[o220,s200] <= 1
 C_few_facility_per_spill[o207,s6]: cover[o207,s6] <= 1
 C_few_facility_per_spill[o192,s200]: cover[o192,s200] <= 1
 C_max_facility: select[s300] + select[s6] + select[s9] + select[s200]
   <= 6
 C_budget: 20000 select[s300] + 10000 select[s6] + 10000 select[s9]
   + 10000 select[s200] <= 1e+12
 C_open_facility[s300,m]: deploy[o203,s300,m] + deploy[o7,s300,m]
   + deploy[o94,s300,m] + deploy[o86,s300,m] + deploy[o93,s300,m]
   + deploy[o6,s300,m] + deploy[o10,s300,m] + deploy[o87,s300,m]
   + deploy[o83,s300,m] + deploy[o91,s300,m] + deploy[o44,s300,m]
   + deploy[o90,s300,m] + deploy[o79,s300,m] + deploy[o84,s300,m]
   + deploy[o82,s300,m] <= 0
 C_open_facility[s300,c]: - 3.1e+21 select[s300] + deploy[o203,s300,c]
   + deploy[o7,s300,c] + deploy[o94,s300,c] + deploy[o86,s300,c]
   + deploy[o93,s300,c] + deploy[o6,s300,c] + deploy[o10,s300,c]
   + deploy[o87,s300,c] + deploy[o83,s300,c] + deploy[o91,s300,c]
   + deploy[o44,s300,c] + deploy[o90,s300,c] + deploy[o79,s300,c]
   + deploy[o84,s300,c] + deploy[o82,s300,c] <= 0
 C_open_facility[s300,i]: - 3.7e+21 select[s300] + deploy[o203,s300,i]
   + deploy[o7,s300,i] + deploy[o94,s300,i] + deploy[o86,s300,i]
   + deploy[o93,s300,i] + deploy[o6,s300,i] + deploy[o10,s300,i]
   + deploy[o87,s300,i] + deploy[o83,s300,i] + deploy[o91,s300,i]
   + deploy[o44,s300,i] + deploy[o90,s300,i] + deploy[o79,s300,i]
   + deploy[o84,s300,i] + deploy[o82,s300,i] <= 0
 C_open_facility[s6,m]: deploy[o208,s6,m] + deploy[o162,s6,m]
   + deploy[o157,s6,m] + deploy[o212,s6,m] + deploy[o214,s6,m]
   + deploy[o160,s6,m] + deploy[o155,s6,m] + deploy[o159,s6,m]
   + deploy[o158,s6,m] + deploy[o153,s6,m] + deploy[o161,s6,m]
   + deploy[o163,s6,m] + deploy[o207,s6,m] <= 0
 C_open_facility[s6,c]: - 1.4e+23 select[s6] + deploy[o208,s6,c]
   + deploy[o162,s6,c] + deploy[o157,s6,c] + deploy[o212,s6,c]
   + deploy[o214,s6,c] + deploy[o160,s6,c] + deploy[o155,s6,c]
   + deploy[o159,s6,c] + deploy[o158,s6,c] + deploy[o153,s6,c]
   + deploy[o161,s6,c] + deploy[o163,s6,c] + deploy[o207,s6,c] <= 0
 C_open_facility[s6,i]: - 4e+23 select[s6] + deploy[o208,s6,i]
   + deploy[o162,s6,i] + deploy[o157,s6,i] + deploy[o212,s6,i]
   + deploy[o214,s6,i] + deploy[o160,s6,i] + deploy[o155,s6,i]
   + deploy[o159,s6,i] + deploy[o158,s6,i] + deploy[o153,s6,i]
   + deploy[o161,s6,i] + deploy[o163,s6,i] + deploy[o207,s6,i] <= 0
 C_open_facility[s9,m]: - 7.8e+21 select[s9] + deploy[o53,s9,m]
   + deploy[o64,s9,m] + deploy[o190,s9,m] + deploy[o3,s9,m]
   + deploy[o45,s9,m] + deploy[o191,s9,m] + deploy[o59,s9,m] <= 0
 C_open_facility[s9,c]: - 8e+21 select[s9] + deploy[o53,s9,c]
   + deploy[o64,s9,c] + deploy[o190,s9,c] + deploy[o3,s9,c]
   + deploy[o45,s9,c] + deploy[o191,s9,c] + deploy[o59,s9,c] <= 0
 C_open_facility[s9,i]: - 8e+21 select[s9] + deploy[o53,s9,i]
   + deploy[o64,s9,i] + deploy[o190,s9,i] + deploy[o3,s9,i]
   + deploy[o45,s9,i] + deploy[o191,s9,i] + deploy[o59,s9,i] <= 0
 C_open_facility[s200,m]: - 2e+21 select[s200] + deploy[o178,s200,m]
   + deploy[o221,s200,m] + deploy[o25,s200,m] + deploy[o169,s200,m]
   + deploy[o185,s200,m] + deploy[o24,s200,m] + deploy[o175,s200,m]
   + deploy[o28,s200,m] + deploy[o27,s200,m] + deploy[o219,s200,m]
   + deploy[o184,s200,m] + deploy[o37,s200,m] + deploy[o183,s200,m]
   + deploy[o181,s200,m] + deploy[o22,s200,m] + deploy[o187,s200,m]
   + deploy[o198,s200,m] + deploy[o220,s200,m] + deploy[o192,s200,m] <= 0
 C_open_facility[s200,c]: - 3.1e+21 select[s200] + deploy[o178,s200,c]
   + deploy[o221,s200,c] + deploy[o25,s200,c] + deploy[o169,s200,c]
   + deploy[o185,s200,c] + deploy[o24,s200,c] + deploy[o175,s200,c]
   + deploy[o28,s200,c] + deploy[o27,s200,c] + deploy[o219,s200,c]
   + deploy[o184,s200,c] + deploy[o37,s200,c] + deploy[o183,s200,c]
   + deploy[o181,s200,c] + deploy[o22,s200,c] + deploy[o187,s200,c]
   + deploy[o198,s200,c] + deploy[o220,s200,c] + deploy[o192,s200,c] <= 0
 C_open_facility[s200,i]: - 3.7e+21 select[s200] + deploy[o178,s200,i]
   + deploy[o221,s200,i] + deploy[o25,s200,i] + deploy[o169,s200,i]
   + deploy[o185,s200,i] + deploy[o24,s200,i] + deploy[o175,s200,i]
   + deploy[o28,s200,i] + deploy[o27,s200,i] + deploy[o219,s200,i]
   + deploy[o184,s200,i] + deploy[o37,s200,i] + deploy[o183,s200,i]
   + deploy[o181,s200,i] + deploy[o22,s200,i] + deploy[o187,s200,i]
   + deploy[o198,s200,i] + deploy[o220,s200,i] + deploy[o192,s200,i] <= 0
 C_deploy_demand[o53,s9,m]: deploy[o53,s9,m] <= 100
 C_deploy_demand[o53,s9,c]: deploy[o53,s9,c] <= 0
 C_deploy_demand[o53,s9,i]: deploy[o53,s9,i] <= 0
 C_deploy_demand[o178,s200,m]: deploy[o178,s200,m] <= 0
 C_deploy_demand[o178,s200,c]: deploy[o178,s200,c] <= 110
 C_deploy_demand[o178,s200,i]: deploy[o178,s200,i] <= 0
 C_deploy_demand[o203,s300,m]: deploy[o203,s300,m] <= 0
 C_deploy_demand[o203,s300,c]: deploy[o203,s300,c] <= 0
 C_deploy_demand[o203,s300,i]: deploy[o203,s300,i] <= 7
 C_deploy_demand[o7,s300,m]: deploy[o7,s300,m] <= 0
 C_deploy_demand[o7,s300,c]: deploy[o7,s300,c] <= 31
 C_deploy_demand[o7,s300,i]: deploy[o7,s300,i] <= 0
 C_deploy_demand[o221,s200,m]: deploy[o221,s200,m] <= 0
 C_deploy_demand[o221,s200,c]: deploy[o221,s200,c] <= 0
 C_deploy_demand[o221,s200,i]: deploy[o221,s200,i] <= 157
 C_deploy_demand[o64,s9,m]: deploy[o64,s9,m] <= 0
 C_deploy_demand[o64,s9,c]: deploy[o64,s9,c] <= 0
 C_deploy_demand[o64,s9,i]: deploy[o64,s9,i] <= 37
 C_deploy_demand[o25,s200,m]: deploy[o25,s200,m] <= 0
 C_deploy_demand[o25,s200,c]: deploy[o25,s200,c] <= 31
 C_deploy_demand[o25,s200,i]: deploy[o25,s200,i] <= 0
 C_deploy_demand[o94,s300,m]: deploy[o94,s300,m] <= 2
 C_deploy_demand[o94,s300,c]: deploy[o94,s300,c] <= 0
 C_deploy_demand[o94,s300,i]: deploy[o94,s300,i] <= 0
 C_deploy_demand[o208,s6,m]: deploy[o208,s6,m] <= 0
 C_deploy_demand[o208,s6,c]: deploy[o208,s6,c] <= 0
 C_deploy_demand[o208,s6,i]: deploy[o208,s6,i] <= 157
 C_deploy_demand[o86,s300,m]: deploy[o86,s300,m] <= 100
 C_deploy_demand[o86,s300,c]: deploy[o86,s300,c] <= 0
 C_deploy_demand[o86,s300,i]: deploy[o86,s300,i] <= 0
 C_deploy_demand[o93,s300,m]: deploy[o93,s300,m] <= 2
 C_deploy_demand[o93,s300,c]: deploy[o93,s300,c] <= 0
 C_deploy_demand[o93,s300,i]: deploy[o93,s300,i] <= 0
 C_deploy_demand[o6,s300,m]: deploy[o6,s300,m] <= 0
 C_deploy_demand[o6,s300,c]: deploy[o6,s300,c] <= 0
 C_deploy_demand[o6,s300,i]: deploy[o6,s300,i] <= 157
 C_deploy_demand[o10,s300,m]: deploy[o10,s300,m] <= 0
 C_deploy_demand[o10,s300,c]: deploy[o10,s300,c] <= 0
 C_deploy_demand[o10,s300,i]: deploy[o10,s300,i] <= 157
 C_deploy_demand[o169,s200,m]: deploy[o169,s200,m] <= 0
 C_deploy_demand[o169,s200,c]: deploy[o169,s200,c] <= 0
 C_deploy_demand[o169,s200,i]: deploy[o169,s200,i] <= 37
 C_deploy_demand[o185,s200,m]: deploy[o185,s200,m] <= 0
 C_deploy_demand[o185,s200,c]: deploy[o185,s200,c] <= 0
 C_deploy_demand[o185,s200,i]: deploy[o185,s200,i] <= 157
 C_deploy_demand[o87,s300,m]: deploy[o87,s300,m] <= 0
 C_deploy_demand[o87,s300,c]: deploy[o87,s300,c] <= 110
 C_deploy_demand[o87,s300,i]: deploy[o87,s300,i] <= 0
 C_deploy_demand[o24,s200,m]: deploy[o24,s200,m] <= 0
 C_deploy_demand[o24,s200,c]: deploy[o24,s200,c] <= 0
 C_deploy_demand[o24,s200,i]: deploy[o24,s200,i] <= 7
 C_deploy_demand[o190,s9,m]: deploy[o190,s9,m] <= 20
 C_deploy_demand[o190,s9,c]: deploy[o190,s9,c] <= 0
 C_deploy_demand[o190,s9,i]: deploy[o190,s9,i] <= 0
 C_deploy_demand[o162,s6,m]: deploy[o162,s6,m] <= 0
 C_deploy_demand[o162,s6,c]: deploy[o162,s6,c] <= 0
 C_deploy_demand[o162,s6,i]: deploy[o162,s6,i] <= 7
 C_deploy_demand[o157,s6,m]: deploy[o157,s6,m] <= 0
 C_deploy_demand[o157,s6,c]: deploy[o157,s6,c] <= 0
 C_deploy_demand[o157,s6,i]: deploy[o157,s6,i] <= 7
 C_deploy_demand[o175,s200,m]: deploy[o175,s200,m] <= 0
 C_deploy_demand[o175,s200,c]: deploy[o175,s200,c] <= 0
 C_deploy_demand[o175,s200,i]: deploy[o175,s200,i] <= 37
 C_deploy_demand[o3,s9,m]: deploy[o3,s9,m] <= 0
 C_deploy_demand[o3,s9,c]: deploy[o3,s9,c] <= 31
 C_deploy_demand[o3,s9,i]: deploy[o3,s9,i] <= 0
 C_deploy_demand[o28,s200,m]: deploy[o28,s200,m] <= 0
 C_deploy_demand[o28,s200,c]: deploy[o28,s200,c] <= 31
 C_deploy_demand[o28,s200,i]: deploy[o28,s200,i] <= 0
 C_deploy_demand[o45,s9,m]: deploy[o45,s9,m] <= 20
 C_deploy_demand[o45,s9,c]: deploy[o45,s9,c] <= 0
 C_deploy_demand[o45,s9,i]: deploy[o45,s9,i] <= 0
 C_deploy_demand[o27,s200,m]: deploy[o27,s200,m] <= 0
 C_deploy_demand[o27,s200,c]: deploy[o27,s200,c] <= 31
 C_deploy_demand[o27,s200,i]: deploy[o27,s200,i] <= 0
 C_deploy_demand[o219,s200,m]: deploy[o219,s200,m] <= 0
 C_deploy_demand[o219,s200,c]: deploy[o219,s200,c] <= 0
 C_deploy_demand[o219,s200,i]: deploy[o219,s200,i] <= 7
 C_deploy_demand[o212,s6,m]: deploy[o212,s6,m] <= 0
 C_deploy_demand[o212,s6,c]: deploy[o212,s6,c] <= 5
 C_deploy_demand[o212,s6,i]: deploy[o212,s6,i] <= 0
 C_deploy_demand[o214,s6,m]: deploy[o214,s6,m] <= 0
 C_deploy_demand[o214,s6,c]: deploy[o214,s6,c] <= 31
 C_deploy_demand[o214,s6,i]: deploy[o214,s6,i] <= 0
 C_deploy_demand[o160,s6,m]: deploy[o160,s6,m] <= 0
 C_deploy_demand[o160,s6,c]: deploy[o160,s6,c] <= 0
 C_deploy_demand[o160,s6,i]: deploy[o160,s6,i] <= 37
 C_deploy_demand[o191,s9,m]: deploy[o191,s9,m] <= 20
 C_deploy_demand[o191,s9,c]: deploy[o191,s9,c] <= 0
 C_deploy_demand[o191,s9,i]: deploy[o191,s9,i] <= 0
 C_deploy_demand[o184,s200,m]: deploy[o184,s200,m] <= 0
 C_deploy_demand[o184,s200,c]: deploy[o184,s200,c] <= 31
 C_deploy_demand[o184,s200,i]: deploy[o184,s200,i] <= 0
 C_deploy_demand[o37,s200,m]: deploy[o37,s200,m] <= 0
 C_deploy_demand[o37,s200,c]: deploy[o37,s200,c] <= 5
 C_deploy_demand[o37,s200,i]: deploy[o37,s200,i] <= 0
 C_deploy_demand[o83,s300,m]: deploy[o83,s300,m] <= 0
 C_deploy_demand[o83,s300,c]: deploy[o83,s300,c] <= 0
 C_deploy_demand[o83,s300,i]: deploy[o83,s300,i] <= 37
 C_deploy_demand[o155,s6,m]: deploy[o155,s6,m] <= 2
 C_deploy_demand[o155,s6,c]: deploy[o155,s6,c] <= 0
 C_deploy_demand[o155,s6,i]: deploy[o155,s6,i] <= 0
 C_deploy_demand[o91,s300,m]: deploy[o91,s300,m] <= 0
 C_deploy_demand[o91,s300,c]: deploy[o91,s300,c] <= 0
 C_deploy_demand[o91,s300,i]: deploy[o91,s300,i] <= 7
 C_deploy_demand[o183,s200,m]: deploy[o183,s200,m] <= 0
 C_deploy_demand[o183,s200,c]: deploy[o183,s200,c] <= 0
 C_deploy_demand[o183,s200,i]: deploy[o183,s200,i] <= 7
 C_deploy_demand[o181,s200,m]: deploy[o181,s200,m] <= 0
 C_deploy_demand[o181,s200,c]: deploy[o181,s200,c] <= 0
 C_deploy_demand[o181,s200,i]: deploy[o181,s200,i] <= 157
 C_deploy_demand[o159,s6,m]: deploy[o159,s6,m] <= 20
 C_deploy_demand[o159,s6,c]: deploy[o159,s6,c] <= 0
 C_deploy_demand[o159,s6,i]: deploy[o159,s6,i] <= 0
 C_deploy_demand[o158,s6,m]: deploy[o158,s6,m] <= 0
 C_deploy_demand[o158,s6,c]: deploy[o158,s6,c] <= 0
 C_deploy_demand[o158,s6,i]: deploy[o158,s6,i] <= 157
 C_deploy_demand[o153,s6,m]: deploy[o153,s6,m] <= 2
 C_deploy_demand[o153,s6,c]: deploy[o153,s6,c] <= 0
 C_deploy_demand[o153,s6,i]: deploy[o153,s6,i] <= 0
 C_deploy_demand[o44,s300,m]: deploy[o44,s300,m] <= 0
 C_deploy_demand[o44,s300,c]: deploy[o44,s300,c] <= 0
 C_deploy_demand[o44,s300,i]: deploy[o44,s300,i] <= 37
 C_deploy_demand[o59,s9,m]: deploy[o59,s9,m] <= 0
 C_deploy_demand[o59,s9,c]: deploy[o59,s9,c] <= 0
 C_deploy_demand[o59,s9,i]: deploy[o59,s9,i] <= 7
 C_deploy_demand[o90,s300,m]: deploy[o90,s300,m] <= 0
 C_deploy_demand[o90,s300,c]: deploy[o90,s300,c] <= 31
 C_deploy_demand[o90,s300,i]: deploy[o90,s300,i] <= 0
 C_deploy_demand[o79,s300,m]: deploy[o79,s300,m] <= 100
 C_deploy_demand[o79,s300,c]: deploy[o79,s300,c] <= 0
 C_deploy_demand[o79,s300,i]: deploy[o79,s300,i] <= 0
 C_deploy_demand[o161,s6,m]: deploy[o161,s6,m] <= 0
 C_deploy_demand[o161,s6,c]: deploy[o161,s6,c] <= 0
 C_deploy_demand[o161,s6,i]: deploy[o161,s6,i] <= 37
 C_deploy_demand[o163,s6,m]: deploy[o163,s6,m] <= 0
 C_deploy_demand[o163,s6,c]: deploy[o163,s6,c] <= 0
 C_deploy_demand[o163,s6,i]: deploy[o163,s6,i] <= 157
 C_deploy_demand[o22,s200,m]: deploy[o22,s200,m] <= 100
 C_deploy_demand[o22,s200,c]: deploy[o22,s200,c] <= 0
 C_deploy_demand[o22,s200,i]: deploy[o22,s200,i] <= 0
 C_deploy_demand[o187,s200,m]: deploy[o187,s200,m] <= 0
 C_deploy_demand[o187,s200,c]: deploy[o187,s200,c] <= 5
 C_deploy_demand[o187,s200,i]: deploy[o187,s200,i] <= 0
 C_deploy_demand[o84,s300,m]: deploy[o84,s300,m] <= 20
 C_deploy_demand[o84,s300,c]: deploy[o84,s300,c] <= 0
 C_deploy_demand[o84,s300,i]: deploy[o84,s300,i] <= 0
 C_deploy_demand[o198,s200,m]: deploy[o198,s200,m] <= 2
 C_deploy_demand[o198,s200,c]: deploy[o198,s200,c] <= 0
 C_deploy_demand[o198,s200,i]: deploy[o198,s200,i] <= 0
 C_deploy_demand[o82,s300,m]: deploy[o82,s300,m] <= 20
 C_deploy_demand[o82,s300,c]: deploy[o82,s300,c] <= 0
 C_deploy_demand[o82,s300,i]: deploy[o82,s300,i] <= 0
 C_deploy_demand[o220,s200,m]: deploy[o220,s200,m] <= 0
 C_deploy_demand[o220,s200,c]: deploy[o220,s200,c] <= 0
 C_deploy_demand[o220,s200,i]: deploy[o220,s200,i] <= 37
 C_deploy_demand[o207,s6,m]: deploy[o207,s6,m] <= 0
 C_deploy_demand[o207,s6,c]: deploy[o207,s6,c] <= 5
 C_deploy_demand[o207,s6,i]: deploy[o207,s6,i] <= 0
 C_deploy_demand[o192,s200,m]: deploy[o192,s200,m] <= 0
 C_deploy_demand[o192,s200,c]: deploy[o192,s200,c] <= 0
 C_deploy_demand[o192,s200,i]: deploy[o192,s200,i] <= 7
Bounds
Binaries
 cover[o53,s9] cover[o178,s200] cover[o203,s300] cover[o7,s300]
 cover[o221,s200] cover[o64,s9] cover[o25,s200] cover[o94,s300]
 cover[o208,s6] cover[o86,s300] cover[o93,s300] cover[o6,s300]
 cover[o10,s300] cover[o169,s200] cover[o185,s200] cover[o87,s300]
 cover[o24,s200] cover[o190,s9] cover[o162,s6] cover[o157,s6]
 cover[o175,s200] cover[o3,s9] cover[o28,s200] cover[o45,s9]
 cover[o27,s200] cover[o219,s200] cover[o212,s6] cover[o214,s6]
 cover[o160,s6] cover[o191,s9] cover[o184,s200] cover[o37,s200]
 cover[o83,s300] cover[o155,s6] cover[o91,s300] cover[o183,s200]
 cover[o181,s200] cover[o159,s6] cover[o158,s6] cover[o153,s6]
 cover[o44,s300] cover[o59,s9] cover[o90,s300] cover[o79,s300]
 cover[o161,s6] cover[o163,s6] cover[o22,s200] cover[o187,s200]
 cover[o84,s300] cover[o198,s200] cover[o82,s300] cover[o220,s200]
 cover[o207,s6] cover[o192,s200] select[s300] select[s6] select[s9]
 select[s200]
End

------------------------------- Model Outputs ----------------------------------
# Solution for model MIP-moo-LAMOSCAD
# Objective value = 6.0191097766349048e+02
cover[o53,s9] 1
cover[o178,s200] 1
cover[o203,s300] 1
cover[o7,s300] 1
cover[o221,s200] 1
cover[o64,s9] 1
cover[o25,s200] 1
cover[o94,s300] 1
cover[o208,s6] 1
cover[o86,s300] 1
cover[o93,s300] 1
cover[o6,s300] 1
cover[o10,s300] 1
cover[o169,s200] 1
cover[o185,s200] 1
cover[o87,s300] 1
cover[o24,s200] 1
cover[o190,s9] 1
cover[o162,s6] 1
cover[o157,s6] 1
cover[o175,s200] 1
cover[o3,s9] 1
cover[o28,s200] 1
cover[o45,s9] 1
cover[o27,s200] 1
cover[o219,s200] 1
cover[o212,s6] 1
cover[o214,s6] 0
cover[o160,s6] 1
cover[o191,s9] 1
cover[o184,s200] 1
cover[o37,s200] 1
cover[o83,s300] 1
cover[o155,s6] 1
cover[o91,s300] 1
cover[o183,s200] 1
cover[o181,s200] 1
cover[o159,s6] 1
cover[o158,s6] 1
cover[o153,s6] 1
cover[o44,s300] 1
cover[o59,s9] 1
cover[o90,s300] 1
cover[o79,s300] 1
cover[o161,s6] 1
cover[o163,s6] 1
cover[o22,s200] 1
cover[o187,s200] 1
cover[o84,s300] 1
cover[o198,s200] 1
cover[o82,s300] 1
cover[o220,s200] 1
cover[o207,s6] 1
cover[o192,s200] 1
select[s300] 1
select[s6] 1
select[s9] 1
select[s200] 1
deploy[o53,s9,m] 0
deploy[o53,s9,c] 0
deploy[o53,s9,i] 0
deploy[o178,s200,m] 0
deploy[o178,s200,c] 110
deploy[o178,s200,i] 0
deploy[o203,s300,m] 0
deploy[o203,s300,c] 0
deploy[o203,s300,i] 7
deploy[o7,s300,m] 0
deploy[o7,s300,c] 31
deploy[o7,s300,i] 0
deploy[o221,s200,m] 0
deploy[o221,s200,c] 0
deploy[o221,s200,i] 157
deploy[o64,s9,m] 0
deploy[o64,s9,c] 0
deploy[o64,s9,i] 37
deploy[o25,s200,m] 0
deploy[o25,s200,c] 31
deploy[o25,s200,i] 0
deploy[o94,s300,m] 0
deploy[o94,s300,c] 0
deploy[o94,s300,i] 0
deploy[o208,s6,m] 0
deploy[o208,s6,c] 0
deploy[o208,s6,i] 157
deploy[o86,s300,m] 0
deploy[o86,s300,c] 0
deploy[o86,s300,i] 0
deploy[o93,s300,m] 0
deploy[o93,s300,c] 0
deploy[o93,s300,i] 0
deploy[o6,s300,m] 0
deploy[o6,s300,c] 0
deploy[o6,s300,i] 157
deploy[o10,s300,m] 0
deploy[o10,s300,c] 0
deploy[o10,s300,i] 157
deploy[o169,s200,m] 0
deploy[o169,s200,c] 0
deploy[o169,s200,i] 37
deploy[o185,s200,m] 0
deploy[o185,s200,c] 0
deploy[o185,s200,i] 157
deploy[o87,s300,m] 0
deploy[o87,s300,c] 110
deploy[o87,s300,i] 0
deploy[o24,s200,m] 0
deploy[o24,s200,c] 0
deploy[o24,s200,i] 7
deploy[o190,s9,m] 0
deploy[o190,s9,c] 0
deploy[o190,s9,i] 0
deploy[o162,s6,m] 0
deploy[o162,s6,c] 0
deploy[o162,s6,i] 7
deploy[o157,s6,m] 0
deploy[o157,s6,c] 0
deploy[o157,s6,i] 7
deploy[o175,s200,m] 0
deploy[o175,s200,c] 0
deploy[o175,s200,i] 37
deploy[o3,s9,m] 0
deploy[o3,s9,c] 31
deploy[o3,s9,i] 0
deploy[o28,s200,m] 0
deploy[o28,s200,c] 31
deploy[o28,s200,i] 0
deploy[o45,s9,m] 0
deploy[o45,s9,c] 0
deploy[o45,s9,i] 0
deploy[o27,s200,m] 0
deploy[o27,s200,c] 31
deploy[o27,s200,i] 0
deploy[o219,s200,m] 0
deploy[o219,s200,c] 0
deploy[o219,s200,i] 7
deploy[o212,s6,m] 0
deploy[o212,s6,c] 5
deploy[o212,s6,i] 0
deploy[o214,s6,m] 0
deploy[o214,s6,c] 31
deploy[o214,s6,i] 0
deploy[o160,s6,m] 0
deploy[o160,s6,c] 0
deploy[o160,s6,i] 37
deploy[o191,s9,m] 0
deploy[o191,s9,c] 0
deploy[o191,s9,i] 0
deploy[o184,s200,m] 0
deploy[o184,s200,c] 31
deploy[o184,s200,i] 0
deploy[o37,s200,m] 0
deploy[o37,s200,c] 5
deploy[o37,s200,i] 0
deploy[o83,s300,m] 0
deploy[o83,s300,c] 0
deploy[o83,s300,i] 37
deploy[o155,s6,m] 0
deploy[o155,s6,c] 0
deploy[o155,s6,i] 0
deploy[o91,s300,m] 0
deploy[o91,s300,c] 0
deploy[o91,s300,i] 7
deploy[o183,s200,m] 0
deploy[o183,s200,c] 0
deploy[o183,s200,i] 7
deploy[o181,s200,m] 0
deploy[o181,s200,c] 0
deploy[o181,s200,i] 157
deploy[o159,s6,m] 0
deploy[o159,s6,c] 0
deploy[o159,s6,i] 0
deploy[o158,s6,m] 0
deploy[o158,s6,c] 0
deploy[o158,s6,i] 157
deploy[o153,s6,m] 0
deploy[o153,s6,c] 0
deploy[o153,s6,i] 0
deploy[o44,s300,m] 0
deploy[o44,s300,c] 0
deploy[o44,s300,i] 37
deploy[o59,s9,m] 0
deploy[o59,s9,c] 0
deploy[o59,s9,i] 7
deploy[o90,s300,m] 0
deploy[o90,s300,c] 31
deploy[o90,s300,i] 0
deploy[o79,s300,m] 0
deploy[o79,s300,c] 0
deploy[o79,s300,i] 0
deploy[o161,s6,m] 0
deploy[o161,s6,c] 0
deploy[o161,s6,i] 37
deploy[o163,s6,m] 0
deploy[o163,s6,c] 0
deploy[o163,s6,i] 157
deploy[o22,s200,m] 0
deploy[o22,s200,c] 0
deploy[o22,s200,i] 0
deploy[o187,s200,m] 0
deploy[o187,s200,c] 5
deploy[o187,s200,i] 0
deploy[o84,s300,m] 0
deploy[o84,s300,c] 0
deploy[o84,s300,i] 0
deploy[o198,s200,m] 0
deploy[o198,s200,c] 0
deploy[o198,s200,i] 0
deploy[o82,s300,m] 0
deploy[o82,s300,c] 0
deploy[o82,s300,i] 0
deploy[o220,s200,m] 0
deploy[o220,s200,c] 0
deploy[o220,s200,i] 37
deploy[o207,s6,m] 0
deploy[o207,s6,c] 5
deploy[o207,s6,i] 0
deploy[o192,s200,m] 0
deploy[o192,s200,c] 0
deploy[o192,s200,i] 7

------------------------------- Model logfile ----------------------------------

Gurobi 10.0.2 (win64) logging started Mon Jul 10 13:15:20 2023

Set parameter LogFile to value "Outputs/Logfiles/model_moo(Jul 10,1315).log"
Gurobi Optimizer version 10.0.2 build v10.0.2rc0 (win64)

CPU model: Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz, instruction set [SSE2|AVX|AVX2]
Thread count: 4 physical cores, 8 logical processors, using up to 8 threads

Optimize a model with 284 rows, 220 columns and 504 nonzeros
Model fingerprint: 0xe0866eff
Variable types: 162 continuous, 58 integer (58 binary)
Coefficient statistics:
  Matrix range     [1e+00, 4e+23]
  Objective range  [2e-02, 2e+01]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+12]
Warning: Model contains large matrix coefficient range
Warning: Model contains large rhs
         Consider reformulating model or setting NumericFocus parameter
         to avoid numerical issues.

---------------------------------------------------------------------------
Multi-objectives: starting optimization with 2 objectives ... 
---------------------------------------------------------------------------

Multi-objectives: applying initial presolve ...
---------------------------------------------------------------------------

Presolve removed 220 rows and 117 columns
Presolve time: 0.00s
Presolved: 64 rows and 103 columns
---------------------------------------------------------------------------

Multi-objectives: optimize objective 1 (objective_re_1) ...
---------------------------------------------------------------------------

Found heuristic solution: objective 0.0000000
Found heuristic solution: objective -601.9289976

Explored 0 nodes (0 simplex iterations) in 0.22 seconds (0.00 work units)
Thread count was 1 (of 8 available processors)

Solution count 1: -601.929 
No other solutions better than -601.929

Optimal solution found (tolerance 1.00e-04)
Best objective -6.019289976106e+02, best bound -6.019289976106e+02, gap 0.0000%
---------------------------------------------------------------------------

Multi-objectives: optimize objective 2 (objective_cost_2) ...
---------------------------------------------------------------------------


Loaded user MIP start with objective -3515.23

Presolve removed 65 rows and 103 columns
Presolve time: 0.00s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.34 seconds (0.00 work units)
Thread count was 1 (of 8 available processors)

Solution count 2: -3531.08 -3515.23 
No other solutions better than -3531.08

Optimal solution found (tolerance 1.00e-04)
Best objective -3.531084035714e+03, best bound -3.531084035714e+03, gap 0.0000%

---------------------------------------------------------------------------
Multi-objectives: solved in 0.40 seconds (0.00 work units), solution count 2


    Variable            X 
-------------------------
cover[o53,s9]            1 
cover[o178,s200]            1 
cover[o203,s300]            1 
cover[o7,s300]            1 
cover[o221,s200]            1 
cover[o64,s9]            1 
cover[o25,s200]            1 
cover[o94,s300]            1 
cover[o208,s6]            1 
cover[o86,s300]            1 
cover[o93,s300]            1 
cover[o6,s300]            1 
cover[o10,s300]            1 
cover[o169,s200]            1 
cover[o185,s200]            1 
cover[o87,s300]            1 
cover[o24,s200]            1 
cover[o190,s9]            1 
cover[o162,s6]            1 
cover[o157,s6]            1 
cover[o175,s200]            1 
cover[o3,s9]            1 
cover[o28,s200]            1 
cover[o45,s9]            1 
cover[o27,s200]            1 
cover[o219,s200]            1 
cover[o212,s6]            1 
cover[o160,s6]            1 
cover[o191,s9]            1 
cover[o184,s200]            1 
cover[o37,s200]            1 
cover[o83,s300]            1 
cover[o155,s6]            1 
cover[o91,s300]            1 
cover[o183,s200]            1 
cover[o181,s200]            1 
cover[o159,s6]            1 
cover[o158,s6]            1 
cover[o153,s6]            1 
cover[o44,s300]            1 
cover[o59,s9]            1 
cover[o90,s300]            1 
cover[o79,s300]            1 
cover[o161,s6]            1 
cover[o163,s6]            1 
cover[o22,s200]            1 
cover[o187,s200]            1 
cover[o84,s300]            1 
cover[o198,s200]            1 
cover[o82,s300]            1 
cover[o220,s200]            1 
cover[o207,s6]            1 
cover[o192,s200]            1 
select[s300]            1 
  select[s6]            1 
  select[s9]            1 
select[s200]            1 
deploy[o178,s200,c]          110 
deploy[o203,s300,i]            7 
deploy[o7,s300,c]           31 
deploy[o221,s200,i]          157 
deploy[o64,s9,i]           37 
deploy[o25,s200,c]           31 
deploy[o208,s6,i]          157 
deploy[o6,s300,i]          157 
deploy[o10,s300,i]          157 
deploy[o169,s200,i]           37 
deploy[o185,s200,i]          157 
deploy[o87,s300,c]          110 
deploy[o24,s200,i]            7 
deploy[o162,s6,i]            7 
deploy[o157,s6,i]            7 
deploy[o175,s200,i]           37 
deploy[o3,s9,c]           31 
deploy[o28,s200,c]           31 
deploy[o27,s200,c]           31 
deploy[o219,s200,i]            7 
deploy[o212,s6,c]            5 
deploy[o214,s6,c]           31 
deploy[o160,s6,i]           37 
deploy[o184,s200,c]           31 
deploy[o37,s200,c]            5 
deploy[o83,s300,i]           37 
deploy[o91,s300,i]            7 
deploy[o183,s200,i]            7 
deploy[o181,s200,i]          157 
deploy[o158,s6,i]          157 
deploy[o44,s300,i]           37 
deploy[o59,s9,i]            7 
deploy[o90,s300,c]           31 
deploy[o161,s6,i]           37 
deploy[o163,s6,i]          157 
deploy[o187,s200,c]            5 
deploy[o220,s200,i]           37 
deploy[o207,s6,c]            5 
deploy[o192,s200,i]            7 

------------------------------- Python Code ------------------------------------
""" Optimization model: maximize effectiveness and minimize cost: MIP

Outline:

1. Define Decision variables
2. Add Constraints
3. Add objective functions
4. Set some gurobi parameters, & write the model
5. Solve the model
6. Write log file
7. Get some variables out of the model for further analysis

Note:

Developer: Tanmoy Das
Date: July 05, 2023
"""

# %% Data
# data processing libraries
import pandas as pd
from datetime import datetime, date
# optimization
import gurobipy as gp
from gurobipy import GRB
# import custom functions or classes
import custom_func
import math


# %% Model 2: MIP-2
def solve(Stations, OilSpills, ResourcesD, coordinates_st, coordinates_spill, SizeSpill, SizeSpill_n,
          Demand, Sensitivity_R, Sensitivity_n, Eff, Effectiveness_n, Availability, NumberStMax, Distance, Distance_n,
          W, QuantityMin, DistanceMax, Cf_s, CostU, Budget,
          BigM, MaxFO):
    """
    :param Stations:
    :param OilSpills:
    :param ResourcesD:
    :param coordinates_st:
    :param coordinates_spill:
    :param SizeSpill:
    :param SizeSpill_n:
    :param Demand:
    :param Sensitivity_R:
    :param Sensitivity_n:
    :param Eff:
    :param Effectiveness_n:
    :param Availability:
    :param NumberStMax:
    :param Distance:
    :param Distance_n:
    :param W:
    :param QuantityMin:
    :param DistanceMax:
    :param Cf_s:
    :param CostU:
    :param Budget:
    :param BigM:
    :param MaxFO:
    :return:
    """

    import gurobipy as gp
    from gurobipy import GRB
    from datetime import datetime, date

    w1, w2, w3, w4, w5, w6 = W[0], W[1], W[2], W[3], W[4], W[5]

    # ---------------------------------------- Set & Index -------------------------------------------------------------
    os_pair = {(o, s): custom_func.compute_distance(coordinates_spill[1][o], coordinates_st[1][s])
               for o in OilSpills
               for s in Stations
               if
               custom_func.compute_distance(tuple(coordinates_spill[1][o]), tuple(coordinates_st[1][s])) < DistanceMax}
    os_pair = tuple(os_pair.keys())

    # sr_pair (based on unique stations in pair_os )
    st_o = list(set([item[1] for item in os_pair]))
    o_st = list(set([item[0] for item in os_pair])) # unique oil spills

    sr_pair = []
    for s in st_o:
        for r in ResourcesD:
            sr_pair.append((s, r))
    sr_pair = tuple(sr_pair)

    osr_pair = {(o, s, r): custom_func.compute_distance(coordinates_spill[1][o], coordinates_st[1][s])
                for o in OilSpills
                for s in Stations
                for r in ResourcesD
                if
                custom_func.compute_distance(tuple(coordinates_spill[1][o]), tuple(coordinates_st[1][s])) < DistanceMax}
    osr_pair = tuple(osr_pair.keys())

    print('--------------MIP-moo--------')
    model = gp.Model("MIP-moo-LAMOSCAD")
    # ---------------------------------------- Decision variable -------------------------------------------------------
    cover = model.addVars(os_pair, vtype=GRB.BINARY, name='cover')  # OilSpills
    select = model.addVars(st_o, vtype=GRB.BINARY, name='select')
    deploy = model.addVars(osr_pair, vtype=GRB.CONTINUOUS, lb=0,
                           name='deploy')  # QuantityMin Minimum quantity constraint ++

    print('cover'); print(cover); print(''); print('select'); print(select); print(''); print('deploy'); print(deploy)

    # %% ----------------------------------------------------------------------------------------------------------------
    # ------------------------------------------------ Constraints -----------------------------------------------------

    # ---------------------------------------- Coverage constraints (cover) --------------------------------------------

    # C10: facility must be open to cover oil spill
    C_open_facility_to_cover = model.addConstrs((cover[o, s] <= select[s]
                                                 for o, s in os_pair), name='C_open_facility_to_cover')

    # C15: Each oil spill should be covered by only one station (rethink formulation later)
    C_few_facility_per_spill = model.addConstrs((cover.sum(o, '*') <= MaxFO
                                               for o, s in os_pair), name='C_few_facility_per_spill')  # ++partly solved

    # ---------------------------------------- Facility constraints (select ) ------------------------------------------
    # C11: max number of facilities to be open
    C_max_facility = model.addConstr((gp.quicksum(select[s]
                                                  for s in Stations) <= NumberStMax),
                                     name='C_max_facility')  # SFS style ++

    # C12: Cost of building facility does not exceed budget
    C_budget = model.addConstr(select.prod(Cf_s) <= Budget,
                               name="C_budget")  # m.addConstr(build.prod(cost) <= budget, name="budget")

    """
    # C14: Hudson
    # Ref Fig3a Canadian Arctic s8, s10 s11, s14
    C_HudsonFacility = model.addConstr((gp.quicksum(select[s]
                                                  for s in ['s8', 's10', 's11', 's14', 's17', 's19']) >= 1),
                                     name='C_HudsonFacility')
    # C15: Up North  s9, s12, s13, s15, s16, s18, s20
    C_UpNorthFacility = model.addConstr((gp.quicksum(select[s]
                                                  for s in ['s9', 's12', 's13', 's15', 's16', 's18', 's20']) <= 1),
                                     name='C_UpNorthFacility')
    """
    # ---------------------------------------- Deploy constraints (deploy) ---------------------------------------------
    # C15: resource capacity constaint & deploy only when facility is open
    C_resource_capacity = model.addConstrs((deploy.sum('*', s, r) <= BigM * Availability[s, r] * select[s]  #
                                            for s, r in sr_pair), name='C_open_facility')  # need improvement++ infeasibility

    # C16: deploy less than demand
    C_deploy_demand = model.addConstrs((deploy[o, s, r] <= Demand[o, r]
                                        for o, s, r in osr_pair), name='C_deploy_demand')

    # C20: usage limit

    # %% ----------------------------------------------------------------------------------------------------------------
    # ----------------------------------------------- Objective function -----------------------------------------------
    model.ModelSense = GRB.MINIMIZE
    objective_1 = gp.quicksum((w1 * SizeSpill_n[o] + 100*w2 * Sensitivity_n[o] - w3 * Distance_n[o, s]) * cover[o, s]
                              for o, s in os_pair)

    objective_2 = gp.quicksum(10**-4*w4 * select[s] * Cf_s[s] for s in Stations) \
                        + gp.quicksum( (10**-2*w5 * CostU[s,r] - 10 * w6 * Effectiveness_n[s, r]) * deploy[o, s, r] for o, s, r in osr_pair)

    model.setObjectiveN(objective_1, index=0, priority=2, weight=-1, name='objective_re_1')
    model.setObjectiveN(objective_2, index=1, priority=1, weight=1, name='objective_cost_2')

    # %% Model parameters
    # Organizing model
    # Limit how many solutions to collect
    model.setParam(GRB.Param.PoolSolutions, 1024)
    # Limit the search space by setting a gap for the worst possible solution that will be accepted
    model.setParam(GRB.Param.PoolGap, 0.80)
    # do a systematic search for the k-best solutions
    # model.setParam(GRB.Param.PoolSearchMode, 2)
    today = date.today()
    now = datetime.now()
    date_time = str(date.today().strftime("%b %d,") + datetime.now().strftime("%H%M"))
    filename = 'model (' + date_time + ')'

    # Write the model
    model.write(f'Outputs/model_moo.lp')
    model.Params.LogFile = f"Outputs/Logfiles/model_moo({date_time}).log"  # write the log file

    # %% Solve the model
    model.optimize()
    # Debugging model
    # model.computeIIS()
    model.write('Outputs/model_moo.sol')

    # %% Query number of multiple objectives, and number of solutions
    x = model.getVars()
    select_series = pd.Series(model.getAttr('X', select))
    deploy_series = pd.Series(model.getAttr('X', deploy))
    select_series[select_series > 0.5]
    deploy_series[deploy_series > 0.5]
    nSolutions = model.SolCount
    nObjectives = model.NumObj
    print('Problem has', nObjectives, 'objectives')
    print('Gurobi found', nSolutions, 'solutions')
    solutions = []
    for s in range(nSolutions):
        # Set which solution we will query from now on
        model.params.SolutionNumber = s

        # Print objective value of this solution in each objective
        print('Solution', s, ':', end='')
        for o in range(nObjectives):
            # Set which objective we will query
            model.params.ObjNumber = o
            # Query the o-th objective value
            print(' ', round(model.ObjNVal, 2), end=' ')
            # query the full vector of the o-th solution
            solutions.append(model.getAttr('Xn', x))
        print()

    for j in range(len(x)):
        if x[j].Xn > 0:
            print(x[j].VarName, x[j].Xn, end=' ')
            print(' ')

    # %% Output the result
    # Obtain model results & carry them outside the model scope
    model.printAttr('X')
    mvars = model.getVars()  # these values are NOT accessible outside the model scope
    names = model.getAttr('VarName', mvars)
    values = model.getAttr('X', mvars)

    # def extract_ones_DV(model, cover, select, amount, spill_data):

    cover_series = pd.Series(model.getAttr('X', cover))
    cover_1s = cover_series[cover_series > 0.5]

    select_series = pd.Series(model.getAttr('X', select))
    select_1s = select_series[select_series > 0.5]
    print('\nselect_1s\n', select_1s)
    deploy_series = pd.Series(model.getAttr('X', deploy))
    deploy_1s = deploy_series[deploy_series > 0.5]
    print('\ndeploy_1s\n', deploy_1s)
    cover_series = pd.Series(model.getAttr('X', cover))
    cover_1s = cover_series[cover_series > 0.5]
    print('\ncover_1s\n', cover_1s)

    # Saving the file
    modelStructure_output_code = python_code = logfile = model_structure = outputs = inputs = ""
    # Reading data from files
    with open('Outputs/model_moo.lp') as fp:
        model_structure = fp.read()
    with open('Outputs/model_moo.sol') as fp:
        outputs = fp.read()
    with open(f'Outputs/Logfiles/model_moo({date_time}).log') as fp:
        logfile = fp.read()
    with open('model.py') as fp:
        python_code = fp.read()
    # Merging 2 files
    # To add the data of file2
    # from next line
    modelStructure_output_code += "------------------------------- Model Structure ----------------------------------\n"
    modelStructure_output_code += model_structure
    modelStructure_output_code += "\n------------------------------- Model Outputs ----------------------------------\n"
    modelStructure_output_code += outputs
    modelStructure_output_code += "\n------------------------------- Model logfile ----------------------------------\n"
    modelStructure_output_code += logfile
    modelStructure_output_code += "\n------------------------------- Python Code ------------------------------------\n"
    modelStructure_output_code += python_code

    with open(f'Outputs/Structure, outputs & python code of {filename}.txt', 'w') as fp:
        fp.write(modelStructure_output_code)

    # Extract assignment variables
    sol_y = pd.Series(model.getAttr('X', deploy))
    sol_y.name = 'Assignments'
    sol_y.index.names = ['Spill #', 'Station no.', 'Resource type']
    assignment4 = sol_y[sol_y > 0.5].to_frame()
    assignment_name = assignment4.reset_index()
    print('assignment_name', assignment_name)

    # %%
    # organize data # need to clean this section ++
    spill_df = pd.DataFrame(coordinates_spill[1]).T.reset_index()
    spill_df.columns = ['Spill #', 'Spill_Latitude', 'Spill_Longitude']
    spill_df['Resource needed'] = pd.DataFrame(SizeSpill)  # ++ update with spill size later
    spill_df['Sensitivity'] = Sensitivity_R  # ++

    station_df = pd.DataFrame(coordinates_st[1]).T.reset_index()
    station_df.columns = ['Station no.', 'St_Latitude', 'St_Longitude']

    assignment2 = pd.merge(assignment_name[['Spill #', 'Station no.']],
                           station_df[['Station no.', 'St_Latitude', 'St_Longitude']])

    assignment3 = pd.merge(assignment2, spill_df[['Spill #', 'Spill_Latitude', 'Spill_Longitude']])
    deploy_reset = deploy_1s.reset_index()
    deploy_reset.columns = ['Spill #', 'Station no.', 'Resource Type', 'Quantity deployed']
    assignment = pd.merge(assignment3, deploy_reset)

    assignment['Distance'] = [math.sqrt((assignment.loc[i]['St_Latitude'] - assignment.loc[i]['Spill_Latitude']) ** 2 \
                                        + (assignment.loc[i]['St_Longitude'] - assignment.loc[i][
        'Spill_Longitude']) ** 2)
                              for i in assignment.index]

    # Outputs from the model +++
    # Calculate Coverage # chance later ++
    coverage_percentage = int(100 * len(cover_1s)/ len(OilSpills))  # / len(cover_series)
    # Calculate total distance travelled
    DistanceTravelled = []
    for i in range(len(assignment)):
        st_coord = (assignment[['St_Latitude', 'St_Longitude']]).iloc[i, :].values
        sp_coord = (assignment[['Spill_Latitude', 'Spill_Longitude']]).iloc[i, :].values
        aaa = DistanceTravelled.append(custom_func.compute_distance(st_coord, sp_coord))

    DistanceTravelled = sum(DistanceTravelled)
    ResponseTimeM = int((DistanceTravelled / 60) / len(OilSpills))
    print(f'Coverage Percentage: {coverage_percentage}%')
    print(f'Mean Response Time: {ResponseTimeM}')

    return model, select, deploy, mvars, names, values, \
        spill_df, station_df, cover_1s, select_1s, deploy_1s, ResponseTimeM, coverage_percentage, assignment
